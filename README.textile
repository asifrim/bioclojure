h1. BioClojure

As big data becomes common place in genomics and genetics, a functional language such as clojure might just provide part of a solution for parallelizing data analysis.

h2. Initial focus

Initial focus is next-generation sequencing and sequence variation. This includes:

* handling FASTQ and bam files (todo; maybe interfacing with Picard)
* handling VCF files

h2. Installation

Either just download the latest jar file, or compile the jar yourself:

bc. lein deps
lein compile
lein uberjar

h2. Example

h3. Convert VCF file to tab-delimited

This library includes a function to convert VCF files to tab-delimited format. This conversion includes *all* fields that are defined in the file; no information is omitted (i.e. all INFO tags are included).

Caution: this does not work for VCFv4 yet. That version allows for genotype fields to be dropped entirely.

bc. java -jar bioclojure.jar vcf2tsv NA12878.vcf NA12878.tsv

h3. Load VCF file into incanter and show histogram of quality scores

bc. cljr repl
> (use 'bioclojure)
> (ns bioclojure)
> (def a (load-vcf "./data/sample.vcf"))
> (with-data a
>   (view (histogram ($ :QUAL))))

h4. What about log-scales?

At the moment incanter charts don't provide logarithmic scales yet. To do this yourself, do

bc. > (with-data a
>   (view (histogram (map #(log %) ($ :QUAL)))))

h2. Dependencies

* clojure-contrib

h2. Disclaimers

* As I'm completely new to clojure, this library will be slow to grow, at least initially.
* As I don't use clojure (much) in real-life work (yet), this library will be slow to grow, at least initially.
* As I have to focus on real work, focus will be what I need: NGS.

Copyright (c) 2010 Jan Aerts
Licensed under the same terms as clojure
